{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OKA Client OKA Client was built in order to provide command-line access to OKA Repository. In order to access OKA Repository platform, please go to https://oka.icmc.usp.br . If you want to host a private version of the repository or access the source code, please go to: https://github.com/rabizao/oka-repository . Please note that all URLs provided here refer to the official repository hosted at https://oka.icmc.usp.br . If you are hosting a private version, you will need to change this host to the private host you are using. Documentation : https://rabizao.github.io/oka/ Source Code : https://github.com/rabizao/oka Requirements Python 3.6+ Installation $ pip install oka License This project is licensed under the terms of the MIT license.","title":"OKA Client"},{"location":"#oka-client","text":"OKA Client was built in order to provide command-line access to OKA Repository. In order to access OKA Repository platform, please go to https://oka.icmc.usp.br . If you want to host a private version of the repository or access the source code, please go to: https://github.com/rabizao/oka-repository . Please note that all URLs provided here refer to the official repository hosted at https://oka.icmc.usp.br . If you are hosting a private version, you will need to change this host to the private host you are using. Documentation : https://rabizao.github.io/oka/ Source Code : https://github.com/rabizao/oka","title":"OKA Client"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation","text":"$ pip install oka","title":"Installation"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"data_operations/","text":"Data Operations Intro OKA Client uses data objects to interact with OKA Repository. Here you will find examples of operations that can be done with data objects. Generate a Data Object From List In order to generate a data object from a list you can do the following: from oka import new_data data = new_data( X=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], y=[0, 1, 1] ) print(data.X) From ARFF File To be done From Pandas DataFrame To be done Split To be done","title":"Data Operations"},{"location":"data_operations/#data-operations-intro","text":"OKA Client uses data objects to interact with OKA Repository. Here you will find examples of operations that can be done with data objects.","title":"Data Operations Intro"},{"location":"data_operations/#generate-a-data-object","text":"","title":"Generate a Data Object"},{"location":"data_operations/#from-list","text":"In order to generate a data object from a list you can do the following: from oka import new_data data = new_data( X=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], y=[0, 1, 1] ) print(data.X)","title":"From List"},{"location":"data_operations/#from-arff-file","text":"To be done","title":"From ARFF File"},{"location":"data_operations/#from-pandas-dataframe","text":"To be done","title":"From Pandas DataFrame"},{"location":"data_operations/#split","text":"To be done","title":"Split"},{"location":"io/","text":"IO Intro Please note that to get access to OKA Repository resources you will first need an API Token. If you do not have one already, please refer to security section to learn more about API Tokens.","title":"IO Intro"},{"location":"io/#io-intro","text":"Please note that to get access to OKA Repository resources you will first need an API Token. If you do not have one already, please refer to security section to learn more about API Tokens.","title":"IO Intro"},{"location":"io/get/","text":"Get a Dataset Function approach In order to get access to a dataset stored in OKA Repository using the function approach you can do the following: >>> from oka import Oka, generate_token, new_data >>> token = generate_token() >>> client = Oka(token) >>> # Sending an example data object. >>> data = new_data( ... X=[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]], ... y=[0, 0, 1, 1, 0] ... ) >>> client.send(data) True >>> # Getting the example data object back. >>> data = client.get(data.id) Please note that OID is the OKA Unique Identifier for datasets and can be found in the dataset description page in the web interface. If you want to know more about the operations that can be done with data objects, please refer to data operations section.","title":"Get a Dataset"},{"location":"io/get/#get-a-dataset","text":"","title":"Get a Dataset"},{"location":"io/get/#function-approach","text":"In order to get access to a dataset stored in OKA Repository using the function approach you can do the following: >>> from oka import Oka, generate_token, new_data >>> token = generate_token() >>> client = Oka(token) >>> # Sending an example data object. >>> data = new_data( ... X=[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]], ... y=[0, 0, 1, 1, 0] ... ) >>> client.send(data) True >>> # Getting the example data object back. >>> data = client.get(data.id) Please note that OID is the OKA Unique Identifier for datasets and can be found in the dataset description page in the web interface. If you want to know more about the operations that can be done with data objects, please refer to data operations section.","title":"Function approach"},{"location":"io/send/","text":"Send a Dataset Function approach In order to send a dataset to OKA Repository using the function approach you can do the following: from oka import Oka, generate_token, new_data token = generate_token() client = Oka(token) data = new_data( X=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], y=[0, 1, 1] ) result = client.send(data) print(result.id) If you want to know more about the operations that can be done with data objects, please refer to data operations section.","title":"Send a Dataset"},{"location":"io/send/#send-a-dataset","text":"","title":"Send a Dataset"},{"location":"io/send/#function-approach","text":"In order to send a dataset to OKA Repository using the function approach you can do the following: from oka import Oka, generate_token, new_data token = generate_token() client = Oka(token) data = new_data( X=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], y=[0, 1, 1] ) result = client.send(data) print(result.id) If you want to know more about the operations that can be done with data objects, please refer to data operations section.","title":"Function approach"},{"location":"security/","text":"Security Intro In order to get access to resources stored in OKA Repository you will have to first generate your API token. Once you have the token, you can instantiate the client and get access to all resources. You can also invalidate the tokens at any time after generation. You will see more details in the next sections.","title":"Security Intro"},{"location":"security/#security-intro","text":"In order to get access to resources stored in OKA Repository you will have to first generate your API token. Once you have the token, you can instantiate the client and get access to all resources. You can also invalidate the tokens at any time after generation. You will see more details in the next sections.","title":"Security Intro"},{"location":"security/generate_token/","text":"Generate Token In order to get access to resources stored in OKA Repository you will have to first generate your API token. This token does not expire and can be retrieved from: Web interface https://oka.icmc.usp.br/client Within Python environment by running: from oka import generate_token token = generate_token() print(token) By running generate_token() you will be prompted to provide your credentials (username and password). Note that this approach is not ideal for unsupervised implementations, since the script will stuck until you provide your credentials.","title":"Generate Token"},{"location":"security/generate_token/#generate-token","text":"In order to get access to resources stored in OKA Repository you will have to first generate your API token. This token does not expire and can be retrieved from: Web interface https://oka.icmc.usp.br/client Within Python environment by running: from oka import generate_token token = generate_token() print(token) By running generate_token() you will be prompted to provide your credentials (username and password). Note that this approach is not ideal for unsupervised implementations, since the script will stuck until you provide your credentials.","title":"Generate Token"},{"location":"security/invalidate_all_tokens/","text":"Invalidate All Tokens If for any reason you want to invalidate all your tokens, you can do so by running: from oka import Oka from oka.security import generate_token token = generate_token() client = Oka(token) client.invalidate_all_tokens()","title":"Invalidate All Tokens"},{"location":"security/invalidate_all_tokens/#invalidate-all-tokens","text":"If for any reason you want to invalidate all your tokens, you can do so by running: from oka import Oka from oka.security import generate_token token = generate_token() client = Oka(token) client.invalidate_all_tokens()","title":"Invalidate All Tokens"}]}